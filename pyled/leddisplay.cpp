
#include <iostream>
#include <termios.h>
#include <fcntl.h>
#include <vector>
#include <map>
#include <unistd.h>
#include <cassert>
#include <cstring>
#include <errno.h>
#include <stdio.h>

class Sprite {
public:
    Sprite()
        : dataWidth_(2)
        , dataHeight_(8)
        , data_()
    { }
    void P(unsigned char data) { data_.push_back(data); }
    size_t width() { return dataWidth_*8; }
    size_t height() { return dataHeight_; };
    size_t dataWidth_;
    size_t dataHeight_;
    std::vector<unsigned char> data_;
};

class Funky : public Sprite {
public:
    Funky()
    {
        P(0b00111111);P(0b11111111);P(0b11111111);P(0b11111100);
        P(0b11110000);P(0b00000000);P(0b00000000);P(0b00000011);
        P(0b11001100);P(0b00000000);P(0b00000000);P(0b00110011);
        P(0b11000011);P(0b00000000);P(0b00000000);P(0b00000011);
        P(0b11000000);P(0b11000000);P(0b00000000);P(0b00000011);
        P(0b11000000);P(0b00110000);P(0b00000000);P(0b00000011);
        P(0b11000000);P(0b00001100);P(0b00000000);P(0b00000011);
        P(0b11000000);P(0b00000011);P(0b00000000);P(0b00000011);
        P(0b11000000);P(0b00000000);P(0b11000000);P(0b00000011);
        P(0b11000000);P(0b00000000);P(0b00110000);P(0b00000011);
        P(0b11000000);P(0b00000000);P(0b00001100);P(0b00000011);
        P(0b11000000);P(0b00000000);P(0b00000011);P(0b00000011);
        P(0b11000000);P(0b00000000);P(0b00000000);P(0b11000011);
        P(0b11001100);P(0b00000000);P(0b00000000);P(0b00110011);
        P(0b11000000);P(0b00000000);P(0b00000000);P(0b00001111);
        P(0b00111111);P(0b11111111);P(0b11111111);P(0b11111100);
        dataWidth_ = 4;
        dataHeight_ = 16
    }
};

class FontLetter : public Sprite {
public:
    FontLetter(const std::string & character)
    {
        if (character.size() == 1) {
            switch (character[0]) {
            case ' ':
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case '-':
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b11111100);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case '/':
                P(0b00000000);P(0b11000000);
                P(0b00000000);P(0b11000000);
                P(0b00000011);P(0b00000000);
                P(0b00001100);P(0b00000000);
                P(0b00110000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case '.':
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case ',':
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b11110000);P(0b00000000);
                P(0b00110000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                break;
            case ':':
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b11110000);P(0b00000000);
                P(0b11110000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b11110000);P(0b00000000);
                P(0b11110000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case '!':
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case '0':
                P(0b00001100);P(0b00000000);
                P(0b00110011);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b00110011);P(0b00000000);
                P(0b00001100);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case '1':
                P(0b00001100);P(0b00000000);
                P(0b00111100);P(0b00000000);
                P(0b00001100);P(0b00000000);
                P(0b00001100);P(0b00000000);
                P(0b00001100);P(0b00000000);
                P(0b00001100);P(0b00000000);
                P(0b00001100);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case '2':
                P(0b00111111);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b00000000);P(0b11000000);
                P(0b00000011);P(0b00000000);
                P(0b00001100);P(0b00000000);
                P(0b00110000);P(0b00000000);
                P(0b11111111);P(0b11000000);
                P(0b00000000);P(0b00000000);
                break;
            case '3':
                P(0b00111111);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b00000000);P(0b11000000);
                P(0b00000011);P(0b00000000);
                P(0b00000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b00111111);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case '4':
                P(0b00000011);P(0b00000000);
                P(0b00001111);P(0b00000000);
                P(0b00110011);P(0b00000000);
                P(0b11000011);P(0b00000000);
                P(0b11111111);P(0b11000000);
                P(0b00000011);P(0b00000000);
                P(0b00000011);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case '5':
                P(0b11111111);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11111111);P(0b00000000);
                P(0b00000000);P(0b11000000);
                P(0b00000000);P(0b11000000);
                P(0b11111111);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case '6':
                P(0b00111111);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11111111);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b00111111);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case '7':
                P(0b11111111);P(0b11000000);
                P(0b00000000);P(0b11000000);
                P(0b00000011);P(0b00000000);
                P(0b00001100);P(0b00000000);
                P(0b00001100);P(0b00000000);
                P(0b00001100);P(0b00000000);
                P(0b00001100);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case '8':
                P(0b00111111);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b00111111);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b00111111);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case '9':
                P(0b00111111);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b00111111);P(0b11000000);
                P(0b00000000);P(0b11000000);
                P(0b00000000);P(0b11000000);
                P(0b00111111);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'a':
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b00111111);P(0b00000000);
                P(0b00000000);P(0b11000000);
                P(0b00111111);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b00111111);P(0b11000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'b':
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11111111);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11111111);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'c':
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b00111111);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b00111111);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'd':
                P(0b00000000);P(0b11000000);
                P(0b00000000);P(0b11000000);
                P(0b00111111);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b00111111);P(0b11000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'e':
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b00111111);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b11111111);P(0b11000000);
                P(0b11000000);P(0b00000000);
                P(0b00111111);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'f':
                P(0b00001100);P(0b00000000);
                P(0b00110011);P(0b00000000);
                P(0b00110000);P(0b00000000);
                P(0b00110000);P(0b00000000);
                P(0b11111100);P(0b00000000);
                P(0b00110000);P(0b00000000);
                P(0b00110000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'g':
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b00111111);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b00111111);P(0b11000000);
                P(0b00000000);P(0b11000000);
                P(0b00111111);P(0b00000000);
                break;
            case 'h':
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11111111);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'i':
                P(0b00110000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b11110000);P(0b00000000);
                P(0b00110000);P(0b00000000);
                P(0b00110000);P(0b00000000);
                P(0b00110000);P(0b00000000);
                P(0b11111100);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'j':
                P(0b00000000);P(0b00000000);
                P(0b00001100);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b00001100);P(0b00000000);
                P(0b00001100);P(0b00000000);
                P(0b00001100);P(0b00000000);
                P(0b00001100);P(0b00000000);
                P(0b11110000);P(0b00000000);
                break;
            case 'k':
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b11000011);P(0b00000000);
                P(0b11001100);P(0b00000000);
                P(0b11110011);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'l':
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'm':
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b11110011);P(0b00000000);
                P(0b11001100);P(0b11000000);
                P(0b11001100);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'n':
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b11001111);P(0b00000000);
                P(0b11110000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'o':
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b00111111);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b00111111);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'p':
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b11111111);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11111111);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                break;
            case 'q':
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b00111111);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b00111111);P(0b11000000);
                P(0b00000000);P(0b11000000);
                P(0b00000000);P(0b11000000);
                break;
            case 'r':
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b11001111);P(0b00000000);
                P(0b11110000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case 's':
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b00111111);P(0b11000000);
                P(0b11000000);P(0b00000000);
                P(0b00111111);P(0b00000000);
                P(0b00000000);P(0b11000000);
                P(0b11111111);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case 't':
                P(0b00110000);P(0b00000000);
                P(0b00110000);P(0b00000000);
                P(0b11111100);P(0b00000000);
                P(0b00110000);P(0b00000000);
                P(0b00110000);P(0b00000000);
                P(0b00110011);P(0b00000000);
                P(0b00001100);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'u':
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b00111111);P(0b11000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'v':
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b00110011);P(0b00000000);
                P(0b00001100);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'w':
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b11000000);P(0b00001100);
                P(0b11000000);P(0b00001100);
                P(0b11000000);P(0b00001100);
                P(0b00110011);P(0b00110000);
                P(0b00001100);P(0b11000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'x':
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b00110011);P(0b00000000);
                P(0b00001100);P(0b00000000);
                P(0b00110011);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'y':
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b00111111);P(0b11000000);
                P(0b00000000);P(0b11000000);
                P(0b00111111);P(0b00000000);
                break;
            case 'z':
                P(0b00000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                P(0b11111111);P(0b01100000);
                P(0b00000011);P(0b00000000);
                P(0b00001100);P(0b00000000);
                P(0b00110000);P(0b00000000);
                P(0b11111111);P(0b11000000);
                P(0b00000000);P(0b00000000);
                break;
            // case 'æ':
            //     P(0b00000000);P(0b00000000);
            //     P(0b00000000);P(0b00000000);
            //     P(0b00111100);P(0b11110000);
            //     P(0b00000011);P(0b00001100);
            //     P(0b00111111);P(0b11111100);
            //     P(0b11000011);P(0b00000000);
            //     P(0b00111100);P(0b11111100);
            //     P(0b00000000);P(0b00000000);
            //     break;
            // case 'ø':
            //     P(0b00000000);P(0b00000000);
            //     P(0b00000000);P(0b00000000);
            //     P(0b00111111);P(0b00000000);
            //     P(0b11000011);P(0b11000000);
            //     P(0b11001100);P(0b11000000);
            //     P(0b11110000);P(0b11000000);
            //     P(0b00111111);P(0b00000000);
            //     P(0b00000000);P(0b00000000);
            //     break;
            // case 'å':
            //     P(0b00001100);P(0b00000000);
            //     P(0b00110011);P(0b00000000);
            //     P(0b00111111);P(0b00000000);
            //     P(0b00000000);P(0b11000000);
            //     P(0b00111111);P(0b11000000);
            //     P(0b11000000);P(0b11000000);
            //     P(0b00111111);P(0b11000000);
            //     P(0b00000000);P(0b00000000);
            //     break;
            case 'A':
                P(0b00111111);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11111111);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'B':
                P(0b11111111);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11111111);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11111111);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'C':
                P(0b00111111);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b00111111);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'D':
                P(0b11111100);P(0b00000000);
                P(0b11000011);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000011);P(0b00000000);
                P(0b11111100);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'E':
                P(0b11111111);P(0b11000000);
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11111100);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11111111);P(0b11000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'F':
                P(0b11111111);P(0b11000000);
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11111100);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'G':
                P(0b00111111);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b00000000);
                P(0b11000011);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b00111111);P(0b11000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'H':
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11111111);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'I':
                P(0b11111100);P(0b00000000);
                P(0b00110000);P(0b00000000);
                P(0b00110000);P(0b00000000);
                P(0b00110000);P(0b00000000);
                P(0b00110000);P(0b00000000);
                P(0b00110000);P(0b00000000);
                P(0b11111100);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'J':
                P(0b00000000);P(0b11000000);
                P(0b00000000);P(0b11000000);
                P(0b00000000);P(0b11000000);
                P(0b00000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b00111111);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'K':
                P(0b11000000);P(0b11000000);
                P(0b11000011);P(0b00000000);
                P(0b11001100);P(0b00000000);
                P(0b11110000);P(0b00000000);
                P(0b11001100);P(0b00000000);
                P(0b11000011);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'L':
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11111111);P(0b11000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'M':
                P(0b11000000);P(0b11000000);
                P(0b11110011);P(0b11000000);
                P(0b11001100);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'N':
                P(0b11000000);P(0b11000000);
                P(0b11110000);P(0b11000000);
                P(0b11001100);P(0b11000000);
                P(0b11000011);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'O':
                P(0b00111111);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b00111111);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'P':
                P(0b11111111);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11111111);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'Q':
                P(0b00111111);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11001100);P(0b11000000);
                P(0b11000011);P(0b00000000);
                P(0b00111100);P(0b11110000);
                P(0b00000000);P(0b00000000);
                break;
            case 'R':
                P(0b11111111);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11111111);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'S':
                P(0b00111111);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b00000000);
                P(0b00111111);P(0b00000000);
                P(0b00000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b00111111);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'T':
                P(0b11111111);P(0b11000000);
                P(0b00001100);P(0b00000000);
                P(0b00001100);P(0b00000000);
                P(0b00001100);P(0b00000000);
                P(0b00001100);P(0b00000000);
                P(0b00001100);P(0b00000000);
                P(0b00001100);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'U':
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b00111111);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'V':
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b00110011);P(0b00000000);
                P(0b00001100);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'W':
                P(0b11000000);P(0b00001100);
                P(0b11000000);P(0b00001100);
                P(0b11000000);P(0b00001100);
                P(0b11000000);P(0b00001100);
                P(0b11000011);P(0b00001100);
                P(0b11001100);P(0b11001100);
                P(0b00110000);P(0b00110000);
                P(0b00000000);P(0b00000000);
                break;
            case 'X':
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b00110011);P(0b00000000);
                P(0b00001100);P(0b00000000);
                P(0b00110011);P(0b00000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'Y':
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b11000000);P(0b11000000);
                P(0b00110011);P(0b00000000);
                P(0b00001100);P(0b00000000);
                P(0b00001100);P(0b00000000);
                P(0b00001100);P(0b00000000);
                P(0b00000000);P(0b00000000);
                break;
            case 'Z':
                P(0b11111111);P(0b11000000);
                P(0b00000000);P(0b11000000);
                P(0b00000011);P(0b00000000);
                P(0b00001100);P(0b00000000);
                P(0b00110000);P(0b00000000);
                P(0b11000000);P(0b00000000);
                P(0b11111111);P(0b11000000);
                P(0b00000000);P(0b00000000);
                break;
            // case 'Æ':
            //     P(0b00111111);P(0b11110000);
            //     P(0b11000011);P(0b00000000);
            //     P(0b11000011);P(0b00000000);
            //     P(0b11111111);P(0b11110000);
            //     P(0b11000011);P(0b00000000);
            //     P(0b11000011);P(0b00000000);
            //     P(0b11000011);P(0b11110000);
            //     P(0b00000000);P(0b00000000);
            //     break;
            // case 'Ø':
            //     P(0b00111111);P(0b11000000);
            //     P(0b11000000);P(0b11110000);
            //     P(0b11000000);P(0b00110000);
            //     P(0b11000011);P(0b00110000);
            //     P(0b11001100);P(0b00110000);
            //     P(0b11110000);P(0b00110000);
            //     P(0b00111111);P(0b11000000);
            //     P(0b00000000);P(0b00000000);
            //     break;
            // case 'Å':
            //     P(0b00001100);P(0b00000000);
            //     P(0b00110011);P(0b00000000);
            //     P(0b00111111);P(0b11000000);
            //     P(0b11000000);P(0b11000000);
            //     P(0b11111111);P(0b11000000);
            //     P(0b11000000);P(0b11000000);
            //     P(0b11000000);P(0b11000000);
            //     P(0b00000000);P(0b00000000);
            //     break;
            default:
                assert(false && "Character not defined in font!");
            }
        }
        dataWidth_ = 2;
        dataHeight_ = 8;
        fontWidth_ = 7;
    }

    FontLetter() { }
    size_t fontWidth_;
};

class LedFont {
public:
    LedFont()
    {
        std::string valid = "abcdefghijklmnopqrstuvxyzABCDEFGHIJKLMNOPQRSTUVXYZ .!/0123456789";
        for (size_t i = 0; i < valid.size(); ++i) {
            std::string c = valid.substr(i, 1);
            charsData_.push_back(FontLetter(c));
            chars_[c] = &charsData_.back();
        }
    }
    std::map<std::string, FontLetter*> chars_;
private:
    std::vector<FontLetter> charsData_;
};

class LedDisplay {
public:
    enum Color {
        RED,
        ORANGE,
        GREEN
    };
    static const unsigned int PIXELS_PER_TEXTLINE = 8;
    static const unsigned int BYTES_PER_LINE = 32;

    LedDisplay(const std::string & device,
               size_t lines,
               LedFont * font)
        : gfxBuffer_(1024)
        , currentX_(0)
        , currentY_(0)
        , devicePath_(device)
        , deviceFileHandle_(-9)
        , lines_(lines)
        , font_(font)
    {
    }
    ~LedDisplay() {
        close(deviceFileHandle_);
    }

    bool open(std::string & error)
    {
        deviceFileHandle_ = ::open(devicePath_.c_str(), O_RDWR | O_NOCTTY | O_NDELAY);
        if (deviceFileHandle_ == -1) {
            error = "Failed to open serial port. Aborting...";
            return false;
        }
        std::cout << "Successfully opened " << devicePath_ << " got fdes=" << deviceFileHandle_ << std::endl;
        termios options;
        tcgetattr(deviceFileHandle_, &options);
        // raw mode
        options.c_iflag &= ~(IGNBRK | BRKINT | PARMRK | ISTRIP
                             | INLCR | IGNCR | ICRNL);
        options.c_oflag &= ~OPOST;
        options.c_lflag &= ~(ECHO | ECHONL | ICANON | ISIG | IEXTEN);
        options.c_cflag = 0;
        options.c_cflag &= ~(CSIZE | PARENB);
        options.c_cflag |= CS8 | B460800;
        tcflush(deviceFileHandle_, TCIFLUSH);
        tcsetattr(deviceFileHandle_, TCSANOW, &options);
    }

    void setByte(size_t row, size_t col, unsigned char data)
    {
        assert(row*col < gfxBuffer_.size());
        gfxBuffer_[row*col] = data;
    }

    void setPixel(size_t xpos, size_t ypos, Color color)
    {
        const size_t col = xpos / 4;
        unsigned fraction = (xpos % 4) * 2;
        if (color == RED) {
            fraction += 1;
        }
        gfxBuffer_[ypos*col] |= 1 << (7-fraction);
        if (color == ORANGE) {
            gfxBuffer_[ypos*col] |= 1 << (7-fraction-1);
        }
    }

    void flush(int line)
    {
        if (line < 0) {
            memset(&gfxBuffer_[0], 0, gfxBuffer_.size());
        }
        else {
            assert(line < lines_);
            const size_t bytesPerLine = 32*8;
            memset(&gfxBuffer_[line*bytesPerLine], 0, bytesPerLine);
        }
    }

    void writeTxt2(const std::string & text, Color color)
    {
        unsigned char colorFilter = 0b11111111;
        if (color == GREEN)
            colorFilter = 0b10101010;
        else if (color == RED)
            colorFilter = 0b01010101;

        for (size_t i = 0; i < text.size(); ++i) {
            assert(font_->chars_.count(std::string(1, text[i])));
            FontLetter & letter = font_->chars_[std::string(1, text[i])];
            for (size_t row = 0; row < letter.dataHeight_; ++row) {
                unsigned col = currentX_ / 4;
                unsigned fraction = currentY_ % 4;
                if (row + currentY_ >= 0 && row + currentY_ < lines_*PIXELS_PER_TEXTLINE) {
                    if (col >= 0 && col < 32) {
                        gfxBuffer_[row+currentY_*col] |= letter.data_[row]>>(fraction*2) & colorFilter;
                    }
                    if (col >= -1 && col < 31) {
                        gfxBuffer_[row+currentY_*(col+1)] |= letter.data_[row]<<(8-fraction*2) & colorFilter;
                        gfxBuffer_[row+currentY_*(col+1)] |= letter.data_[row+1]>>(fraction*2) & colorFilter;
                    }
                    if (col >= -2 && col < 30) {
                        gfxBuffer_[row+currentY_*(col+2)] |= letter.data_[row+1]<<(8-fraction*2) & colorFilter;
                    }
                }
            }
            currentX_ += letter.dataWidth_*8;
        }
    }

    void writeTxt(const std::string & text, Color color)
    {
        unsigned char colorfilter = 0b11111111;
        if (color == GREEN)
            colorfilter = 0b10101010;
        else if (color == RED)
            colorfilter = 0b01010101;

        for (size_t i = 0; i < text.size(); ++i) {
            FontLetter & letter = font_->chars_[text.substr(i, 1)];
            for (size_t letterRow = 0; letterRow < letter.dataHeight_; ++letterRow) {
                const int col = currentX_ / 4;
                const int fraction = currentX_ % 4;
                if (letterRow+currentY_ >= 0 && letterRow+currentY_ < lines_*PIXELS_PER_TEXTLINE) {
                    if (col >= 0 && col < 32) {
                        gfxBuffer_[(letterRow+currentY_)*BYTES_PER_LINE+col] |= letter.data_[letterRow*letter.dataWidth_+0]>>(fraction*2) & colorfilter;
                    }
                    if (col >= -1 && col < 31) {
                        gfxBuffer_[(letterRow+currentY_)*BYTES_PER_LINE+col+1] |= letter.data_[letterRow*letter.dataWidth_+0]<<(8-fraction*2) & colorfilter;
                        gfxBuffer_[(letterRow+currentY_)*BYTES_PER_LINE+col+1] |= letter.data_[letterRow*letter.dataWidth_+1]>>(fraction*2) & colorfilter;
                    }
                    if (col >= -2 && col < 30) {
                        gfxBuffer_[(letterRow+currentY_)*BYTES_PER_LINE+col+2] |= letter.data_[letterRow*letter.dataWidth_+1]<<(8-fraction*2) & colorfilter;
                    }
                }
            }
            currentX_ += letter.fontWidth_;
        }
    }

    void drawSprite(const Sprite & sprite, Color color)
    {
        unsigned char colorfilter = 0b11111111;
        if (color == GREEN)
            colorfilter = 0b10101010;
        else if (color == RED)
            colorfilter = 0b01010101;

        for (size_t i = 0; i < text.size(); ++i) {
            FontLetter & letter = font_->chars_[text.substr(i, 1)];
            for (size_t letterRow = 0; letterRow < letter.dataHeight_; ++letterRow) {
                const int col = currentX_ / 4;
                const int fraction = currentX_ % 4;
                if (letterRow+currentY_ >= 0 && letterRow+currentY_ < lines_*PIXELS_PER_TEXTLINE) {
                    if (col >= 0 && col < 32) {
                        gfxBuffer_[(letterRow+currentY_)*BYTES_PER_LINE+col] |= letter.data_[letterRow*letter.dataWidth_+0]>>(fraction*2) & colorfilter;
                    }
                    if (col >= -1 && col < 31) {
                        gfxBuffer_[(letterRow+currentY_)*BYTES_PER_LINE+col+1] |= letter.data_[letterRow*letter.dataWidth_+0]<<(8-fraction*2) & colorfilter;
                        gfxBuffer_[(letterRow+currentY_)*BYTES_PER_LINE+col+1] |= letter.data_[letterRow*letter.dataWidth_+1]>>(fraction*2) & colorfilter;
                    }
                    if (col >= -2 && col < 30) {
                        gfxBuffer_[(letterRow+currentY_)*BYTES_PER_LINE+col+2] |= letter.data_[letterRow*letter.dataWidth_+1]<<(8-fraction*2) & colorfilter;
                    }
                }
            }
            currentX_ += letter.width();
        }
    }

    void send()
    {
        static const unsigned char sync = '0';
        int sent = write(deviceFileHandle_, &sync, sizeof sync);
        if (sent == -1)
            printf("Oh dear, something went wrong with read()! %s\n", strerror(errno));
        assert(sent == 1);
        sent = 0;
        while (sent != -1 && sent < gfxBuffer_.size()) {
            //std::cout << "Sending " << gfxBuffer_.size()-sent << " bytes" << std::endl;
            sent += write(deviceFileHandle_, &gfxBuffer_[sent], (gfxBuffer_.size()-sent));
        }
        if (sent == -1) {
            printf("Oh dear 2, something went wrong with read()! %s\n", strerror(errno));
        }
        tcdrain(deviceFileHandle_);
        //std::cout << "Sent " << sent << " characters" << std::endl;
        assert(sent == gfxBuffer_.size());
    }

    std::vector<unsigned char> gfxBuffer_;
    size_t currentX_;
    size_t currentY_;

private:
    const std::string devicePath_;
    int deviceFileHandle_;
    size_t lines_;
    LedFont * font_;
};


int main()
{
    LedFont busFont;
    LedDisplay display("/dev/ttyUSB0", 4, &busFont);
    std::string error;
    display.open(error);
    if (!error.empty()) {
        std::cout << "ERROR" << std::endl;
        return 1;
    }
    while (true) {
        for (size_t i = 0; i < 200; ++i) {
            display.flush(-1);
            display.currentX_ = i-60;
            display.writeTxt("Hei hei!", LedDisplay::RED);
            //display.gfxBuffer_[i] = 1;
            display.send();
        }
    }
    return 0;
}
